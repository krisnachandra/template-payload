/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    pages: Page;
    blogs: Blog;
    categories: Category;
    media: Media;
    users: User;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    'archive-blog': ArchiveBlog;
    settings: Settings;
    header: Header;
    footer: Footer;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  slug?: string | null;
  title: string;
  publishedDate?: string | null;
  layout?:
    | (
        | {
            sectionID?: string | null;
            content?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-rich-text';
          }
        | {
            sectionID?: string | null;
            title?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            desc?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            links?:
              | {
                  link: {
                    type?: ('reference' | 'archive' | 'custom') | null;
                    newTab?: boolean | null;
                    reference?:
                      | ({
                          relationTo: 'pages';
                          value: string | Page;
                        } | null)
                      | ({
                          relationTo: 'blogs';
                          value: string | Blog;
                        } | null);
                    archive?: string | null;
                    url?: string | null;
                    label: string;
                    appearance?: ('Default' | 'Outline') | null;
                  };
                  id?: string | null;
                }[]
              | null;
            sliders?:
              | {
                  image?: string | Media | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-slider';
          }
        | {
            sectionID?: string | null;
            video?: string | Media | null;
            poster?: string | Media | null;
            autoplay?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-video';
          }
        | {
            sectionID?: string | null;
            username?: string | null;
            instagramTokenUrl?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-instagram-feeds';
          }
        | {
            sectionID?: string | null;
            title?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            mapIframe?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-contact-form';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: string;
  slug?: string | null;
  title: string;
  categories?: (string | Category)[] | null;
  publishedDate?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  layout?:
    | (
        | {
            sectionID?: string | null;
            content?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-rich-text';
          }
        | {
            sectionID?: string | null;
            video?: string | Media | null;
            poster?: string | Media | null;
            autoplay?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-video';
          }
        | {
            sectionID?: string | null;
            title?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            mapIframe?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-contact-form';
          }
      )[]
    | null;
  relatedPosts?: (string | Blog)[] | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title?: string | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  roles?: ('admin' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  blur?: boolean | null;
  optimize?: boolean | null;
  caption?: {
    slate?:
      | {
          [k: string]: unknown;
        }[]
      | null;
    html?: string | null;
  };
  base64?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "archive-blog".
 */
export interface ArchiveBlog {
  id: string;
  publishedDate?: string | null;
  limitPost: number;
  sortBy: '-publishedDate' | 'publishedDate';
  layout?:
    | (
        | {
            sectionID?: string | null;
            docs?: (string | Blog)[] | null;
            totalDocs?: number | null;
            limit?: number | null;
            totalPages?: number | null;
            page?: number | null;
            pagingCounter?: number | null;
            hasPrevPage?: boolean | null;
            hasNextPage?: boolean | null;
            prevPage?: number | null;
            nextPage?: number | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-archive-blog';
          }
        | {
            sectionID?: string | null;
            content?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-rich-text';
          }
        | {
            sectionID?: string | null;
            title?: {
              slate?:
                | {
                    [k: string]: unknown;
                  }[]
                | null;
              html?: string | null;
            };
            mapIframe?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'block-example-contact-form';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Settings {
  id: string;
  siteSettings: {
    searchEngineVisibility?: boolean | null;
    title?: string | null;
    homepage?: (string | null) | Page;
    linkType?:
      | {
          link: {
            type?: ('reference' | 'archive' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'blogs';
                  value: string | Blog;
                } | null);
            archive?: string | null;
            url?: string | null;
            label: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  socialLinks: {
    facebook?: string | null;
    instagram?: string | null;
    linkedin?: string | null;
    tiktok?: string | null;
    whatsapp?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  navItems?:
    | {
        haveChild?: boolean | null;
        title?: string | null;
        links?:
          | {
              link: {
                type?: ('reference' | 'archive' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'blogs';
                      value: string | Blog;
                    } | null);
                archive?: string | null;
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        navChildItems?:
          | {
              link: {
                type?: ('reference' | 'archive' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'blogs';
                      value: string | Blog;
                    } | null);
                archive?: string | null;
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'archive' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'blogs';
                value: string | Blog;
              } | null);
          archive?: string | null;
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
